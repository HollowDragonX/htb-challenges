{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>Welcome to HollowDragonX's solutions for HackTheBox challenges.</p>"},{"location":"coding/addition/challenge_description/","title":"Addition","text":"<p>Two ancient runes hold hidden powers. Combine them to unlock the sum and reveal their secret.</p>"},{"location":"coding/addition/challenge_description/#challenge-description","title":"Challenge description","text":"<p>Take in two numbers, \\(a\\) and \\(b\\). Return \\(a + b\\). </p> <pre><code>Input\n3 4\n</code></pre> <pre><code>Output\n7\n</code></pre>"},{"location":"coding/addition/challenge_description/#solution-script","title":"Solution script","text":"<pre><code>#!/usr/bin/env python3\n\n# HTB Coding Challenge \"Addition\" - Solution by HollowDragonX\n# https://www.github.com/HollowDragonX/htb-challenges\n\ndef add_numbers(num1: int, num2: int) -&gt; int:\n    \"\"\"\n        Adds two numbers together.\n\n    Args:\n        num1 (int): First number to add.\n        num2 (int): Second number to add.\n\n    Returns:\n        int: The sum of num1 and num2.\n    \"\"\"\n\n    return num1 + num2\n\n\ndef main() -&gt; None:\n\n    num1 = int(input())\n    num2 = int(input())\n\n    print(add_numbers(num1, num2))\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"coding/minmax/challenge_description/","title":"MinMax","text":"<p>In a haunted graveyard, spirits hide among the numbers. Can you identify the smallest and largest among them before they vanish?</p>"},{"location":"coding/minmax/challenge_description/#challenge-description","title":"Challenge description","text":"<p>We've intercepted codes from an underground organisation with intentions of malicious activity. Intelligence has informed us that most of the numbers are garbage, but the biggest and smallest numbers in the file form co-ordinates of the group's next attack location.</p> <p>Identify these 2 numbers, then print out first the minimum and then the maximum. Please be swift, agent - the clock is ticking! </p> <pre><code>Input:\n3.29 3.09 1.34 2.89 \n</code></pre> <pre><code>Output:\n1.34\n3.29\n</code></pre>"},{"location":"coding/minmax/challenge_description/#solution-script","title":"Solution script","text":"<pre><code>#!/usr/bin/env python3\n\n# HTB Coding Challenge \"MinMax\" - Solution by HollowDragonX\n# https://www.github.com/HollowDragonX/htb-challenges\n\n\ndef main() -&gt; None:\n\n    codes = list(map(float, input().split()))\n\n    print(min(codes))\n    print(max(codes))\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"coding/oddly_even/challenge_description/","title":"Oddly Even","text":"<p>The ghostly clock ticks strangely. Determine whether its chimes are even or odd to calm the restless spirits.</p>"},{"location":"coding/oddly_even/challenge_description/#challenge-description","title":"Challenge description","text":"<p>Take in a number, print \"odd\" if odd and \"even\" if even.</p> <pre><code>Input:\n3\n</code></pre> <pre><code>Output:\nodd\n</code></pre>"},{"location":"coding/oddly_even/challenge_description/#solution-script","title":"Solution script","text":"<pre><code>#!/usr/bin/env python3\n\n# HTB Coding Challenge \"Oddly Even\" - Solution by HollowDragonX\n# https://www.github.com/HollowDragonX/htb-challenges\n\ndef check_parity(number: int) -&gt; bool:\n    \"\"\"\n        Checks if the recieved number is odd or even.\n\n    Args:\n        number (int): The number to check.\n\n    Returns:\n        bool: True if the number is even, False if odd.\n    \"\"\"\n\n    return number % 2 == 0\n\n\ndef get_parity_message(number: int) -&gt; str:\n    \"\"\"\n        Returns a message indicating if the number is odd or even.\n\n    Args:\n        number (int): The number to check.\n\n    Returns:\n        str: \"even\" if the number is even, \"odd\" if odd.\n    \"\"\"\n\n    if check_parity(number):\n        return \"even\"\n    else:\n        return \"odd\"\n\n\ndef main() -&gt; None:\n\n    number = int(input())\n\n    print(get_parity_message(number))\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"coding/reversal/challenge_description/","title":"Reversal","text":"<p>A dark incantation was written backward in a spellbook. Reverse the cursed words to reveal their true meaning.</p>"},{"location":"coding/reversal/challenge_description/#challenge-description","title":"Challenge description","text":"<p>Take in a string. Print the reverse. </p> <pre><code>Input: \nTest me\n</code></pre> <pre><code>Output:\nem tseT\n</code></pre>"},{"location":"coding/reversal/challenge_description/#solution-script","title":"Solution script","text":"<pre><code>#!/usr/bin/env python3\n\n# HTB Coding Challenge \"Reversal\" - Solution by HollowDragonX\n# https://www.github.com/HollowDragonX/htb-challenges\n\ndef reverse_string(string: str) -&gt; str:\n    \"\"\"\n        Reverses the given string.\n\n    Args:\n        string (str): The string to reverse.\n\n    Returns:\n        str: The reversed string.\n    \"\"\"\n\n    return string[::-1]\n\n\ndef main() -&gt; None:\n\n    string = input()\n\n    print(reverse_string(string))\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"coding/threat_index/challenge_description/","title":"Threat Index","text":"<p>Volnayan APTs are exfiltrating data through TOR nodes, embedding attack signals in plain sight. Your job is to scan each outbound stream and identify known malicious keywords linked to Operation Blackout. Each keyword has a threat level \u2014 the more hits you find, the higher the danger. Analyze the stream, tally the signals, and calculate the overall threat score.</p>"},{"location":"coding/threat_index/challenge_description/#challenge-description","title":"Challenge description","text":"<p>You are monitoring data streams exiting suspicious TOR nodes, believed to be part of the Empire of Volnaya\u2019s covert APT infrastructure. As Talion \u201cLittle Byte\u201d Reyes you\u2019ve been assigned to identify and evaluate indicators of compromise embedded in the exfiltrated traffic.</p> <p>Your job is to scan each stream for high-risk keywords associated with known attack patterns linked to Operation Blackout.</p> <p>Each keyword has a weight representing its severity, based on intelligence recovered from earlier breaches. The more often a keyword appears \u2014 and the higher its weight - the greater the threat posed by that stream. The data stream contains only lowercase letters and digits.</p> <p>You must calculate the threat score of each stream using the formula:</p> <pre><code>threat score = \u03a3 (occurrences of keyword \u00d7 keyword weight)\n</code></pre> <p>Here is the list of all the keywords and their associated weight:</p> <pre><code>KEYWORD      -&gt; WEIGHT\n\"scan\"       -&gt; 1\n\"response\"   -&gt; 2\n\"control\"    -&gt; 3\n\"callback\"   -&gt; 4\n\"implant\"    -&gt; 5\n\"zombie\"     -&gt; 6\n\"trigger\"    -&gt; 7\n\"infected\"   -&gt; 8\n\"compromise\" -&gt; 9\n\"inject\"     -&gt; 10\n\"execute\"    -&gt; 11\n\"deploy\"     -&gt; 12\n\"malware\"    -&gt; 13\n\"exploit\"    -&gt; 14\n\"payload\"    -&gt; 15\n\"backdoor\"   -&gt; 16\n\"zeroday\"    -&gt; 17\n\"botnet\"     -&gt; 18\n</code></pre> <pre><code>30 &lt;= data stream length &lt;= 10^6\n</code></pre> <p><pre><code>Input:\npayloadrandompayloadhtbzerodayrandombytesmalware\n</code></pre> <pre><code>Expected output:\n60\n</code></pre></p> <pre><code>Analyzing the data stream:\npayloadrandompayloadhtbzerodayrandombytesmalware\n^^^^^^^      ^^^^^^^   ^^^^^^^           ^^^^^^^\n  15           15        17                13\n\nCalculating the threat score:\n\nthreat score = 2 * 15 + 17 + 13 = 60\n</code></pre>"},{"location":"coding/threat_index/challenge_description/#solution-script","title":"Solution script","text":"<pre><code>#!/usr/bin/env python3\n\n# HTB Coding Challenge \"Threat Index\" - Solution by HollowDragonX\n# https://www.github.com/HollowDragonX/htb-challenges\n\ndef calculate_threat_score(data_stream: str, blacklist_keywords: dict[str, int]) -&gt; int:\n    \"\"\"\n    Calculates the threat score based on the occurrence of blacklist keywords in a data stream.\n\n    Args:\n        data_stream (str): The input data stream to analyze.\n        blacklist_keywords (dict[str, int]): A dictionary mapping keywords to their threat weights.\n\n    Returns:\n        int: The calculated threat score.\n    \"\"\"\n\n    threat_score = 0\n    for keyword, weight in blacklist_keywords.items():\n        occurence = data_stream.count(keyword)\n        threat_score += (occurence * weight)\n    return threat_score\n\n\ndef main() -&gt; None:\n\n    data_stream = input()\n\n    blacklist_keywords = {\n        \"scan\": 1,\n        \"response\": 2,\n        \"control\": 3,\n        \"callback\": 4,\n        \"implant\": 5,\n        \"zombie\": 6,\n        \"trigger\": 7,\n        \"infected\": 8,\n        \"compromise\": 9,\n        \"inject\": 10,\n        \"execute\": 11,\n        \"deploy\": 12,\n        \"malware\": 13,\n        \"exploit\": 14,\n        \"payload\": 15,\n        \"backdoor\": 16,\n        \"zeroday\": 17,\n        \"botnet\": 18\n    }\n\n    print(calculate_threat_score(data_stream, blacklist_keywords))\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"}]}